0.  What is pneumonoultramicroscopicsilicovolcanoconiosis?

    According to Merriam-Webster's Medical Dictionary,
    pneumonoultramicroscopicsilicovolcanoconiosis is a
    pneumoconiosis caused by inhalation of very fine
    silicate or quartz dust.

1.  According to its man page, what does getrusage do?
    
    #include <sys/time.h>
    #include <sys/resource.h>
    int getrusage( int <who>, struct rusage <*usage> )

    getrusage() returns resource usage measures for <who>,
    which can be one of the following:

    RUSAGE_SELF
    Return resource usage statistics for the calling process, which is the sum
    of resources used by all threads in the process.

    RUSAGE_CHILDREN
    Return resource usage statistics for all children of the calling process
    that have terminated and been waited for.  These statistics will include the
    resources used by grandchildren, and further removed descendants, if all of
    the intervening descendants waited on their terminated children.

    RUSAGE_THREAD (since Linux 2.6.26)
    Return resource usage statistics for the calling thread.

2.  Per that same man page, how many members are in a variable
    of type struct rusage?

    The resource usages are returned in the structure pointed to by usage, which has the following form:

        struct rusage {
            struct timeval ru_utime; /* user CPU time used */
            struct timeval ru_stime; /* system CPU time used */
            long   ru_maxrss;        /* maximum resident set size */
            long   ru_ixrss;         /* integral shared memory size */
            long   ru_idrss;         /* integral unshared data size */
            long   ru_isrss;         /* integral unshared stack size */
            long   ru_minflt;        /* page reclaims (soft page faults) */
            long   ru_majflt;        /* page faults (hard page faults) */
            long   ru_nswap;         /* swaps */
            long   ru_inblock;       /* block input operations */
            long   ru_oublock;       /* block output operations */
            long   ru_msgsnd;        /* IPC messages sent */
            long   ru_msgrcv;        /* IPC messages received */
            long   ru_nsignals;      /* signals received */
            long   ru_nvcsw;         /* voluntary context switches */
            long   ru_nivcsw;        /* involuntary context switches */
        };

    There are sixteen members in a variable of type struct rusage.

    However, further reading in the manual page reveals that seven of these
    fields are unmaintained and currently unused on Linux systems:

    ru_ixrss, ru_idrss, ru_isrss, ru_nswap, ru_msgsnd, ru_msgrcv, ru_nsignals

    "Not all fields are completed; unmaintained fields are set to zero by the
    kernel. (The unmaintained fields are provided for compatibility with other
    systems, and because they may one day be supported on Linux.)"

    After ignoring the unused fields, nine member fields remain available.

    However, "POSIX.1-2001 specifies getrusage(), but specifies only the fields
    ru_utime and ru_stime." A close reading of the speller.c source code reveals
    that, indeed, only these two POSIX-compliant fields are used in our program.

    ru_utime
    This is the total amount of time spent executing in user mode, expressed in
    a timeval structure (seconds plus microseconds).

    ru_stime
    This is the total amount of time spent executing in kernel mode, expressed
    in a timeval structure (seconds plus microseconds).

3.  Why do you think we pass before and after by reference (instead of by value)
    to calculate, even though we’re not changing their contents?

    In speller.c:35 we declare these two variables of type struct rusage:
    
    // structs for timing data:
    struct rusage before, after;

    Then, whenever we call getrusage() we pass the address of one of these,
    using the & (address-of) operator:

    // load dictionary
    getrusage(RUSAGE_SELF, &before);
    bool loaded = load(dictionary);
    getrusage(RUSAGE_SELF, &after);

    This is how getrusage() returns the resource usage statistics: by modifying
    the members of the referenced variables, rather than by explicitly returning
    a struct. (The prototype declaration makes it clear that getrusage() will
    return an int return value. Also, from the manpage: "On success, zero is 
    returned.  On error, -1 is returned, and errno is set appropriately.")

    I am not certain, but I think that the reason to continue passing pointers
    to &before and &after when using the calculate() function, rather than
    passing copies of these variables by value, is primarily a question of
    efficiency. After all, we are measuring resource usage. Why should we waste
    system resources making copies of the resource usage statistics?

4.  Explain as precisely as possible, in a paragraph or more, how main goes
    about reading words from a file. In other words, convince us that you
    indeed understand how that function’s for loop works.

    First, we try to open the text file passed as a command-line argument.
    We have already checked to ensure the correct number of arguments:

    if (argc != 2 && argc != 3)
    {
        printf("Usage: speller [dictionary] text\n");
        return 1;
    }

    Since we did not print the Usage and exit, there are two possibilities.

    Either the user has optionally specified a dictionary, in which case:
    (argc == 3) and the source text is argv[2]

    or the user omitted the optional argument, using the default dictionary:
    (argc == 2) and the source text is argv[1].

    We use the ternary operator to determine which argument contains the file:
    char* text = (argc == 3) ? argv[2] : argv[1];
    For legibility, we declare a char* text and store the appropriate arg there.

    Then, we try to open the file pointer for reading:
    FILE* fp = fopen(text, "r");

    If this operation fails and (fp == NULL), we complain and quit.

    Now, we declare global variables used in the spell-check.
    There are three int variables, and one char array:
    int index = 0, misspellings = 0, words = 0;
    char word[LENGTH+1];

    The three ints are initialized to zero:
    index will be used to index into the word[] array,
          and reset to zero at the start of each new word.
    misspellings will be incremented by one if check(word) returns false,
                 indicating that (word) is not in the dictionary.
    words will be incremented by one as each new word is found.

    The char array is initialized to [LENGTH+1].
    LENGTH is a symbolic constant defined in dictionary.h:
    // maximum length for a word
    // (e.g., pneumonoultramicroscopicsilicovolcanoconiosis)
    #define LENGTH 45

    We set word[LENGTH+1] to allow an extra char for the NUL terminator '\0'
    after our longest word (pneumonoultramicroscopicsilicovolcanoconiosis).

    Now that our file pointer is opened for reading, and all of the necessary
    global variables have been declared, we are ready to analyze the for loop.

    for (int c = fgetc(fp); c != EOF; c = fgetc(fp))

    Line 76, above, is the heart of the loop. It declares an automatic local
    variable c for temporary storage of each character read from the file. (Note
    that c is declared as an int rather than as a char, since that's the
    data type returned by fgetc() -- but that's fine, because in C, character
    literals actually have type int, since chars are numeric values!) The for
    loop's conditional statement tests whether (c != EOF) and continues to
    iterate through the loop until the EOF (end of file character) is reached.
    Finally, each iteration assigns the value of c to fgetc(fp) -- in effect,
    reading the next character from the file and saving its value in int c.

    if (isalpha(c) || (c == '\'' && index > 0))
    Line 79, above, tests to make sure that each character is alphabetical, with
    one exception: an apostrophe character may be included (in contractions and
    possessives) provided that index > 0 (that is to say, the apostrophe is not
    the first character in the word). If this returns true, we append each
    successive character to the word[] array and increment the index:

    82      word[index] = c;
    83      index++;

    NOTE: 82 and 83 are line numbers which are not part of the C source file.
          Any line numbers included ahead are intended only for convenience, and
          should be disregarded when analyzing C syntax.
    If we encounter a string longer than the symbolic constant LENGTH (45
    characters) we disregard it by consuming the remainder of the string:
    89      while ((c = fgetc(fp)) != EOF && isalpha(c));
    ... which just sucks up the chars looking for a space or non-alphabetic
    character, without attempting to add the chars to the word[] array ...
    and then preparing for a new word:
    92      index = 0;

    There are two "else if" conditional branches in the loop:

    97  else if (isdigit(c))
    The above line tests to see whether a digit is encountered in the word, and
    if one is found, we use a similar method to skip it:
    100     while ((c = fgetc(fp)) != EOF && isalnum(c));
    ... which just sucks up the chars looking for a space or non-alphanumeric
    character, without attempting to add the chars to the word[] array ...
    and then prepare for a new word:
    103     index = 0;

    The remaining conditional branch is where the bulk of the work is done:
    107 else if (index > 0)
    ... this doesn't look like much on its own, but it will only be reached if
    fgetc() returns whitespace or punctuation after a non-zero stretch of
    alphabetic characters, without bumping into any numeric chars or exceeding
    the LENGTH symbolic constant. If all that is true, we terminate the string:

    110             word[index] = '\0';
    ... by adding the NUL terminator to the next place in the array. Then:

    113             words++;
    ... we auto-increment the word count by one, and move on to spell checking!

    // check word's spelling
    116             getrusage(RUSAGE_SELF, &before);
    117             bool misspelled = !check(word);
    118             getrusage(RUSAGE_SELF, &after);
    119 
    120             // update benchmark
    121             time_check += calculate(&before, &after);
    ... lines 116 and 118 are calls to getrusage() discussed above, which are
    used to calculate the amount of time spent, in user mode and kernel mode, on
    the call to the check() function.
    ... line 117 declares a boolean variable to store the value returned by
    the check() function, which will be TRUE if the word is in the dictionary
    and FALSE if it is not. But wait! bool misspelled actually stores the
    logical inverse of the return value -- so if check() returns TRUE, then the
    word is in the dictionary and misspelled = FALSE, whereas if check() returns
    FALSE, then the word is not in the dictionary, and misspelled = TRUE.
    ... line 121 sets the benchmark for the check() function by calling
    calculate() which basically takes the difference between the timeval
    structures, after minus before, returned by getrusage(). (This is a slight
    oversimplification, but a more complete analysis of the calculate() function
    would be beyond the scope of this question.)

    Little remains in the implementation.
    We check to see whether (misspelled == TRUE) and if it is, we print the
    misspelled word and increment the misspellings counter:

    123             // print word if misspelled
    124             if (misspelled)
    125             {
    126                 printf("%s\n", word);
    127                 misspellings++;
    128             }

    Then, as with the other two conditional branches above, we zero out the
    index value to start collecting chars for the next word:

    130             // prepare for next word
    131             index = 0;
    132         }
    133     }

    That's the end of the for loop!

5.  Why do you think we used fgetc to read each word’s characters one at a time
    rather than use fscanf with a format string like "%s" to read whole words 
    at a time? Put another way, what problems might arise by relying on fscanf 
    alone?

    We read each character of the file one at a time so that we can evaluate
    each character as we add it to the word[] array. We want to discard strings
    containing non-alphabetic characters other than the apostrophe, and strings
    longer than the symbolic constant LENGTH, so it is more efficient to analyze
    each char as we add it, and discard the string if it contains numbers or
    punctuation (or if it contains more than 45 characters). It may be possible
    to read entire words with fscanf() ... but we would still need to analyze
    each character and count the length in order to filter our input as desired,
    and doing it this way would add considerable overhead. With the current
    implementation, we maximize efficiency by keeping track of the string length
    as we add chars by incrementing the integer variable index, which saves us
    the bother of calling strlen() to see whether the word is longer than 45
    chars. Our fgetc() method also saves valuable processor cycles by discarding
    the remainder of any string that fails to match our criteria, without
    processing it further. Finally, consider the case of a mega-string, much
    longer than 45 chars. Using fgetc() allows us to process only the first 46
    chars before dropping it on the floor, but the fscanf() string-consuming
    method would be "tricked" into reading the whole string into memory. A
    sufficiently long string input could be crafted to exceed the bounds of the
    memory allocated for our use, causing the program to crash.

6.  Why do you think we declared the parameters for check and load as const?

    Here are the function prototype declarations for check() and load() as
    defined in dictionary.h:

    bool check(const char* word);

    bool load(const char* dictionary);

    The keyword const indicates that the pointers *word and *dictionary are
    pointers to constant character array values -- that is to say, the strings
    stored at the referenced memory locations will not be changed through the
    pointer variables used in the check() and load() functions. (Note that it
    is still possible to change those values outside of the function, as we do
    when building each word[] string within the body of the main() function.)

    We declare these pointer variables to point to constant characters in order
    to ensure that the values passed to these functions will not be changed by
    the student, no matter how they choose to implement their function. If a
    student accidentally attempts to modify these values in their function, the
    compiler will exit with an error message warning that we are attempting
    "assignment of read-only variable".

7.  TODO


8.  TODO


9.  TODO


10. TODO


